/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.DMLService;

namespace OutSystems.HubEdition.DatabaseProvider.Cache.DML {

    /// <summary>
    /// Class to generate the DML operators required by the applications to perform simple queries.
    /// </summary>
    public class CacheDMLOperators : BaseDMLOperators {

        /// <summary>
        /// Initializes a new instance of the <see cref="CacheDMLOperators"/> class.
        /// </summary>
        /// <param name="dmlService">The DML service.</param>
        internal CacheDMLOperators(IDMLService dmlService) : base(dmlService) { }

        /// <summary>
        /// Returns a DML expression that subtracts two numbers.
        /// This implementation returns <code>n1 - n2</code>.
        /// </summary>
        /// <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        public override string Subtract(string n1, string n2) {
            return $"CAST({n1} - {n2} AS NUMERIC)";
        }

        /// <summary>
        /// Returns a DML expression that computes the numeric negation of a number.
        /// This implementation returns <code>-n</code>.
        /// </summary>
        /// <param name="n">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        public override string Negative(string n) {
            return $"CAST(-1 * {n} AS NUMERIC)";
        }

    }
}
