/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;

namespace OutSystems.HubEdition.DatabaseProvider.Cache.Configuration {

    /// <summary>
    /// This class encapsulates a connection string and other configuration information required to connect to a database.
    /// </summary>
    public class CacheDatabaseConfiguration : BaseDatabaseConfiguration {

        /// <summary>
        /// Gets the database provider. It provides information about the database,
        /// and access to its services.
        /// </summary>
        public override IDatabaseProvider DatabaseProvider {
            get { return CacheDatabaseProvider.Instance; }
        }

        /*
        This annotation defines how the configuration will be displayed in Service Center by using the following properties:
            - Label: Label of the form for this field
            - IsMandatory: Defines if the configuration field is mandatory
            - Order: The order within each region that the field will show up in the configuration form
            - Region: Form segment that groups related configuration fields
                 * DatabaseLocation: First region of the configuration form that defines the database you are going to integrate with.
                                     Common examples of fields in this region are: Server, Port and Schema.
                 * UserSpecific: Second region of the configuration form that defines authentication information required to connect.
                                 Common examples of fields are: Username and password
                 * AdminSpecific: Ignore for integration purposes
                 * Advanced: Ignore for integration purposes
         
        */

        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "Server")]
        public string Server { get; set; }

        [UserDefinedConfigurationParameter(Label = "Port", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation, Prompt = "Port")]
        public string Port { get; set; }

        [UserDefinedConfigurationParameter(Label = "Namespace", IsMandatory = true, Order = 3, Region = ParameterRegion.DatabaseLocation, Prompt = "Namespace")]
        public string Namespace { get; set; }

        [UserDefinedConfigurationParameter(Label = "Schema", IsMandatory = true, Order = 4, Region = ParameterRegion.DatabaseLocation, Prompt = "Schema")]
        public string Schema { get; set; }

        [UserDefinedConfigurationParameter(Label = "UserId", IsMandatory = true, Order = 1, Region = ParameterRegion.UserSpecific, Prompt = "User ID")]
        public string UserId { get; set; }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, Order = 2, Region = ParameterRegion.UserSpecific, Prompt = "Password")]
        public string Password { get; set; }

        /// <summary>
        /// This property represents the advanced configuration object
        /// </summary>
         // Example: Server = 127.0.0.1; Port = 1972; Namespace = SAMPLES; Password = hac33a$; User ID = OUTSYSTEMS;
        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(
            "Insert configuration parameters separated by ';'. User ID and Password will be inserted automatically if present. Example: Server=serverAddress1; Port = 1972; Namespace = SAMPLES; Schema=Sample",
            "Connection String Parameters",
            "[User ID=$UserId; Password=<hidden>; ] $AdvancedConnectionStringField");

        /// <summary>
        /// This property represents the database identifier to be used in the configuration.
        /// </summary>
        /// <exception cref="System.NotImplementedException"></exception>
        public override string DatabaseIdentifier {
            get { return Schema; }
        }

        public override AdvancedConfiguration AdvancedConfiguration {
            get { return advancedConfiguration; }
            set { advancedConfiguration = value; }
        }

        public override int GetHashCode() {
            return base.GetHashCode() ^ GetHashCodeBasedOnParts(Server, Namespace, Schema, UserId, Password);
        }

        public override bool Equals(object obj) {
            var config = obj as CacheDatabaseConfiguration;

            return config != null && base.Equals(obj) && Server == config.Server && Port == config.Port && Namespace == config.Namespace &&
                Schema == config.Schema && UserId == config.UserId && Password == config.Password &&
                ConnectionStringOverride == config.ConnectionStringOverride && AdvancedConfiguration == config.AdvancedConfiguration;
        }

        /// <summary>
        /// Returns a basic connection string with attributes such as username and password.
        /// </summary>
        /// <returns></returns>
        protected override string AssembleBasicConnectionString() {
            return string.Format("Server={0}; Port={1}; Namespace={2}; User ID={3}; Password={4}; SQLDIALECT=mssql; METADATAFORMAT=mssql;", Server, Port, Namespace, UserId, Password);
        }

        /// <summary>
        /// Returns an advanced connection string with attributes that might be specific for a particular database.
        /// </summary>
        /// <returns></returns>
        protected override string AssembleAdvancedConnectionString() {

            string result = "";
            if (string.IsNullOrEmpty(UserId) == false) {
                result += string.Format("User ID={0};", UserId);

                if (string.IsNullOrEmpty(Password) == false) {
                    result += string.Format("Password={0};", Password);
                }
            }
            result += AdvancedConfiguration.AdvancedConnectionStringField + " SQLDIALECT=mssql; METADATAFORMAT=mssql;";

            return result;

        }

        /// <summary>
        /// Gets the runtime database configuration.
        /// </summary>
        /// <value>
        /// The runtime database configuration.
        /// </value>
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
            get {
                return new CacheRuntimeDatabaseConfiguration {
                    Namespace = Namespace,
                    Schema = Schema,
                    Username = UserId,
                    ConnectionString = ConnectionString
                };
            }
        }
    }
}
