//------------------------------------------------------------------------------
// CacheProvider version: 2017.1.1.111
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8745
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sample {
    
    
    /// <summary>
    /// This is a sample embeddable class representing an address.
    /// </summary>
    public partial class Address : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Address";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 51887;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(24);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Address() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Address", typeof(Address));
            ;
            Sample.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("City", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("State", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Street", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Address.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Zip", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.Address.CheckSumMethodDict.Add("%Delete", 286);
            Sample.Address.CheckSumMethodDict.Add("%Open", 29934);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Address() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Address(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Address.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Address(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Address.ServerClassName);
        }
        
        /// <summary>
        /// The city name.
        /// </summary>
        public virtual string City {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("City", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("City", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The 2-letter state abbreviation.
        /// </summary>
        public virtual string State {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("State", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("State", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The street address.
        /// </summary>
        public virtual string Street {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Street", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Street", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The 5-digit U.S. Zone Improvement Plan (ZIP) code.
        /// </summary>
        public virtual string Zip {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Zip", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Zip", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %Delete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDelete(InterSystems.Data.CacheClient.CacheConnection conn, byte[] oid, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(oid, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Address.RunClassMethodS(conn, Sample.Address.ServerClassName, "%Delete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Open
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpen(InterSystems.Data.CacheClient.CacheConnection conn, byte[] initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Address.RunClassMethodS(conn, Sample.Address.ServerClassName, "%Open", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Address.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Address.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Address.ServerClassName);
            if (metaInfo.Validate(Sample.Address.ClassCheckSum, Sample.Address.PropertyInfoColn, Sample.Address.CheckSumMethodDict, Sample.Address.CheckSumQueryDict, Sample.Address.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Address.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Address.AllPropertiesInfoColn != null)) {
                return Sample.Address.AllPropertiesInfoColn;
            }
            Sample.Address.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Address.PropertyInfoColn);
            return Sample.Address.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Address.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This sample persistent class represents a company.<br>
    /// </summary>
    public partial class Company : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Company";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(32);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(5);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Company() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Company", typeof(Company));
            ;
            Sample.Company.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Employees", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tRelationship, 26223));
            Sample.Company.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Mission", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Company.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Company.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Revenue", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Sample.Company.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("TaxID", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.Company.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            Sample.Company.CheckSumMethodDict.Add("IDKEYExists", 13237);
            Sample.Company.CheckSumMethodDict.Add("IDKEYOpen", 23507);
            Sample.Company.CheckSumMethodDict.Add("NameIdxExists", 10116);
            Sample.Company.CheckSumMethodDict.Add("PrintPayroll", 6932);
            Sample.Company.CheckSumMethodDict.Add("TaxIDIdxDelete", 34248);
            Sample.Company.CheckSumMethodDict.Add("TaxIDIdxExists", 10116);
            Sample.Company.CheckSumMethodDict.Add("TaxIDIdxOpen", 11293);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Company() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Company(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Company.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Company(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Company.ServerClassName);
        }
        
        /// <summary>
        /// The <class>Employee</class> objects associated with this <class>Company</class>.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheRelationshipObject Employees {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheRelationshipObject));
                        this.GetPropertyS("Employees", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheRelationshipObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Employees", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The company's mission statement.
        /// </summary>
        public virtual string Mission {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Mission", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Mission", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The company's name.
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The last reported revenue for the company.
        /// </summary>
        public virtual System.Nullable<long> Revenue {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Revenue", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Revenue", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The unique Tax ID number for the company.
        /// </summary>
        public virtual string TaxID {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("TaxID", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("TaxID", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static Sample.Company IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Company));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Company)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameIdxExists
        /// </summary>
        public static System.Nullable<bool> NameIdxExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "NameIdxExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// This method prints out the payroll for this company by iterating over 
        ///all the <class>Employee</class> objects related to it and printing 
        ///their names and salaries.<br>
        ///You can try this out from the <i>Cach&eacute;</i> command line by opening 
        ///an instance of <class>Company</class> object and invoking this method:
        ///<example>
        ///Set company = ##class(Sample.Company).%OpenId(1)
        ///
        ///Do company.PrintPayroll()
        ///</example>
        /// </summary>
        public virtual void PrintPayroll() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    this.RunMethodS("PrintPayroll", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method TaxIDIdxDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TaxIDIdxDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "TaxIDIdxDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TaxIDIdxExists
        /// </summary>
        public static System.Nullable<bool> TaxIDIdxExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "TaxIDIdxExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TaxIDIdxOpen
        /// </summary>
        public static Sample.Company TaxIDIdxOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Company));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Company.RunClassMethodS(conn, Sample.Company.ServerClassName, "TaxIDIdxOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Company)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, typeof(Sample.Company), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, typeof(Sample.Company), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, typeof(Sample.Company))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, timeout, typeof(Sample.Company), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, typeof(Sample.Company), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, timeout, typeof(Sample.Company), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Company Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, typeof(Sample.Company), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, typeof(Sample.Company), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, typeof(Sample.Company), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, typeof(Sample.Company))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, timeout, typeof(Sample.Company), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, typeof(Sample.Company), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, concurrency, timeout, typeof(Sample.Company), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Company OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Company)(conn.OpenProxyObj(Sample.Company.ServerClassName, id, typeof(Sample.Company), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Company.ExistsIdInternal(conn, Sample.Company.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Company.DeleteIdInternal(conn, Sample.Company.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Sample.Company.KillExtentInternal(conn, Sample.Company.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Company.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Company.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Company.ServerClassName);
            if (metaInfo.Validate(Sample.Company.ClassCheckSum, Sample.Company.PropertyInfoColn, Sample.Company.CheckSumMethodDict, Sample.Company.CheckSumQueryDict, Sample.Company.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Company.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Company.AllPropertiesInfoColn != null)) {
                return Sample.Company.AllPropertiesInfoColn;
            }
            Sample.Company.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Company.PropertyInfoColn);
            return Sample.Company.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Company.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This class is an example of subclassing %SQL.CustomResultSet. Custom result sets are similar
    ///to queries with TYPE = %Library.Query. Subclassing %SQL.CustomResultSet has a few advantages
    ///over custom queries. Result sets are somewhat more efficient when interacting with the server.
    ///The metadata for a result set is constructed from the class definition so there is never a need for
    ///ROWSPEC. Also, result sets provide a more OO interface.
    ///
    ///The result set created by this class contains rows (the number of rows specified at instantiation)
    ///of randomly generated data.
    ///
    ///When subclassing %SQL.CustomResultSet, there are a few steps that you must follow in order to produce
    ///a working result set.
    ///
    ///	1.	Define properties that correspond to each column in the result row.
    ///	2.	Define private properties that you need to maintain the current state of the
    ///		result set.
    ///	3.	Override and implement %OpenCursor. In this method you will initialize the result
    ///		iterator and prepare the data for return. Report any errors encountered during execution
    ///			by setting %SQLCODE and %Message.
    ///	4.	Override and implement %Next. In this method you will retrieve the next row. If the end
    ///		of the result set is reached then return 0. Otherwise, set the row properties to the
    ///		appropriate value and return 1.
    ///	5.	Override and implement %CloseCursor. This is only necessary if you need to perform some
    ///		clean up.
    ///
    ///	If you wish to instantiate your custom result set class and return it to a caller then you must
    ///implement an SQL routine (aka, "stored procedure"). This class includes an SQL routine 'CustomResult'.
    ///
    ///Instances of %SQL.IResultSet are not meant to be "reused" meaning that a result set class
    ///expects to be instantiated, the rows iterated over, and then destructed.
    /// </summary>
    public partial class CustomResultSet : SysSQL.CustomResultSet {
        
        /// <summary>Server class name</summary>
        public new const string ServerClassName = "Sample.CustomResultSet";
        
        /// <summary>Meta information checksum</summary>
        public new const long ClassCheckSum = 53465;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(24);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(6);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static CustomResultSet() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.CustomResultSet", typeof(CustomResultSet));
            ;
            Sample.CustomResultSet.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("City", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.CustomResultSet.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ID", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Sample.CustomResultSet.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.CustomResultSet.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Spouse", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 57059));
            Sample.CustomResultSet.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("State", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.CustomResultSet.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Street", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.CustomResultSet.CheckSumMethodDict.Add("CustomResult", 25580);
            ;
        }
        
        /// <summary>Internal API</summary>
        public CustomResultSet() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public CustomResultSet(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.CustomResultSet.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public CustomResultSet(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.CustomResultSet.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property City
        /// </summary>
        public virtual string City {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("City", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("City", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property ID
        /// </summary>
        public virtual System.Nullable<long> ID {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("ID", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ID", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Name
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Spouse
        /// </summary>
        public virtual Sample.Person Spouse {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Person));
                        this.GetPropertyS("Spouse", mtdSignature);
                        return ((Sample.Person)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Spouse", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property State
        /// </summary>
        public virtual string State {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("State", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("State", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Street
        /// </summary>
        public virtual string Street {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Street", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Street", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// This is a stored procedure that returns an instance of Sample.CustomResultSet to the caller. This procedure could
        ///also declare input, input-output, output and return value parameters.
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus CustomResult(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> pRowcount) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pRowcount, false);
                    Sample.CustomResultSet.RunClassMethodS(conn, Sample.CustomResultSet.ServerClassName, "CustomResult", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public new static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.CustomResultSet.ServerClassName);
            SysSQL.CustomResultSet.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.CustomResultSet.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public new static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.CustomResultSet.ServerClassName);
            if (metaInfo.Validate(Sample.CustomResultSet.ClassCheckSum, Sample.CustomResultSet.PropertyInfoColn, Sample.CustomResultSet.CheckSumMethodDict, Sample.CustomResultSet.CheckSumQueryDict, Sample.CustomResultSet.GetAllPropertiesInfoColn())) {
                return;
            }
            SysSQL.CustomResultSet.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.CustomResultSet.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected new static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.CustomResultSet.AllPropertiesInfoColn != null)) {
                return Sample.CustomResultSet.AllPropertiesInfoColn;
            }
            Sample.CustomResultSet.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.CustomResultSet.PropertyInfoColn);
            Sample.CustomResultSet.AllPropertiesInfoColn.InsertRange(Sample.CustomResultSet.AllPropertiesInfoColn.Count, SysSQL.CustomResultSet.GetAllPropertiesInfoColn());
            return Sample.CustomResultSet.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.CustomResultSet.ServerClassName;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Projection of class Sample.Customer
    /// </summary>
    public partial class Customer : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Customer";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 51887;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(37);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(6);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Customer() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Customer", typeof(Customer));
            ;
            Sample.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Addresses", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tArrayOfObj, 48832));
            Sample.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MailingAddresses", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfObj, 55822));
            Sample.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MyAddress", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 62725));
            Sample.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Status", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Customer.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("TS", InterSystems.Data.CacheTypes.ClientTypeId.tTimeStamp, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 11140));
            ;
            Sample.Customer.CheckSumMethodDict.Add("%Delete", 286);
            Sample.Customer.CheckSumMethodDict.Add("%Open", 29934);
            Sample.Customer.CheckSumMethodDict.Add("SetDefault", 6932);
            Sample.Customer.CheckSumMethodDict.Add("ToString", 48431);
            Sample.Customer.CheckSumMethodDict.Add("ToStringWrapper", 64754);
            Sample.Customer.CheckSumMethodDict.Add("writeAddr", 43429);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Customer() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Customer(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Customer.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Customer(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Customer.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Addresses
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheArrayOfObjects<Sample.Address> Addresses {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheArrayOfObjects<Sample.Address>));
                        this.GetPropertyS("Addresses", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheArrayOfObjects<Sample.Address>)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Addresses", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MailingAddresses
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfObjects<Sample.Address> MailingAddresses {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheListOfObjects<Sample.Address>));
                        this.GetPropertyS("MailingAddresses", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfObjects<Sample.Address>)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("MailingAddresses", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MyAddress
        /// </summary>
        public virtual Sample.Address MyAddress {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Address));
                        this.GetPropertyS("MyAddress", mtdSignature);
                        return ((Sample.Address)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("MyAddress", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Name
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Status
        /// </summary>
        public virtual string Status {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Status", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Status", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property TS
        /// </summary>
        public virtual System.Nullable<System.DateTime> TS {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tTimeStamp);
                        this.GetPropertyS("TS", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheTimestampReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("TS", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %Delete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDelete(InterSystems.Data.CacheClient.CacheConnection conn, byte[] oid, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(oid, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "%Delete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Open
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpen(InterSystems.Data.CacheClient.CacheConnection conn, byte[] initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "%Open", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SetDefault
        /// </summary>
        public virtual void SetDefault() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    this.RunMethodS("SetDefault", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method ToStringWrapper
        /// </summary>
        public static string ToStringWrapper(InterSystems.Data.CacheClient.CacheConnection conn, byte[] Arg1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                    mtdSignature.Add(Arg1, false);
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "ToStringWrapper", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method writeAddr
        /// </summary>
        public static void writeAddr(InterSystems.Data.CacheClient.CacheConnection conn, ref string str, Sample.Address addr) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(str, true);
                    mtdSignature.Add(addr, conn, typeof(Sample.Address), false);
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "writeAddr", mtdSignature);
                    str = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[0])).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Customer.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Customer.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Customer.ServerClassName);
            if (metaInfo.Validate(Sample.Customer.ClassCheckSum, Sample.Customer.PropertyInfoColn, Sample.Customer.CheckSumMethodDict, Sample.Customer.CheckSumQueryDict, Sample.Customer.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Customer.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Customer.AllPropertiesInfoColn != null)) {
                return Sample.Customer.AllPropertiesInfoColn;
            }
            Sample.Customer.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Customer.PropertyInfoColn);
            return Sample.Customer.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Customer.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This sample persistent class represents an employee.<br>
    /// </summary>
    public partial class Employee : Sample.Person {
        
        /// <summary>Server class name</summary>
        public new const string ServerClassName = "Sample.Employee";
        
        /// <summary>Meta information checksum</summary>
        public new const long ClassCheckSum = 21695;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(41);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(5);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Employee() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Employee", typeof(Employee));
            ;
            Sample.Employee.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Company", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 8718));
            Sample.Employee.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Notes", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tCharStream, 50936));
            Sample.Employee.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Picture", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tBinStream, 18187));
            Sample.Employee.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Salary", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Sample.Employee.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Title", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.Employee.CheckSumMethodDict.Add("CurrentAge", 38207);
            Sample.Employee.CheckSumMethodDict.Add("IDKEYDelete", 29753);
            Sample.Employee.CheckSumMethodDict.Add("IDKEYExists", 62324);
            Sample.Employee.CheckSumMethodDict.Add("IDKEYOpen", 6232);
            Sample.Employee.CheckSumMethodDict.Add("NameIDXExists", 59205);
            Sample.Employee.CheckSumMethodDict.Add("PrintPersons", 7044);
            Sample.Employee.CheckSumMethodDict.Add("PrintPersonsSQL", 7044);
            Sample.Employee.CheckSumMethodDict.Add("SSNKeyDelete", 17673);
            Sample.Employee.CheckSumMethodDict.Add("SSNKeyExists", 59205);
            Sample.Employee.CheckSumMethodDict.Add("SSNKeyOpen", 36014);
            Sample.Employee.CheckSumMethodDict.Add("StoredProcTest", 34793);
            Sample.Employee.CheckSumMethodDict.Add("UpdateProcTest", 45806);
            Sample.Employee.CheckSumMethodDict.Add("WritePicture", 6932);
            ;
            Sample.Employee.CheckSumQueryDict.Add("ByName", 27202);
        }
        
        /// <summary>Internal API</summary>
        public Employee() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Employee(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Employee.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Employee(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Employee.ServerClassName);
        }
        
        /// <summary>
        /// The company this employee works for.
        /// </summary>
        public virtual Sample.Company Company {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Company));
                        this.GetPropertyS("Company", mtdSignature);
                        return ((Sample.Company)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Company", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// A character stream containing notes about this employee.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheCharacterStream Notes {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheCharacterStream));
                        this.GetPropertyS("Notes", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheCharacterStream)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Notes", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// A picture of the employee
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheBinaryStream Picture {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheBinaryStream));
                        this.GetPropertyS("Picture", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheBinaryStream)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Picture", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The employee's current salary.
        /// </summary>
        public virtual System.Nullable<long> Salary {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Salary", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Salary", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The employee's job title.
        /// </summary>
        public virtual string Title {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Title", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Title", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// This class method calculates a current age given a date of birth <var>date</var>.
        /// </summary>
        public new static System.Nullable<long> CurrentAge(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate date) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(date, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "CurrentAge", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public new static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public new static Sample.Employee IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Employee));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Employee)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameIDXExists
        /// </summary>
        public new static System.Nullable<bool> NameIDXExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "NameIDXExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
        ///within the database.
        /// </summary>
        public new static void PrintPersons(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "PrintPersons", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Prints out data on all persons within the database using SQL to 
        ///iterate over all the person data.
        /// </summary>
        public new static void PrintPersonsSQL(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "PrintPersonsSQL", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SSNKeyDelete
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus SSNKeyDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "SSNKeyDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SSNKeyExists
        /// </summary>
        public new static System.Nullable<bool> SSNKeyExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "SSNKeyExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SSNKeyOpen
        /// </summary>
        public new static Sample.Employee SSNKeyOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Employee));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "SSNKeyOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Employee)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// This is a sample of how to define an SQL stored procedure using a 
        ///class method. This method can be called as a stored procedure via 
        ///ODBC or JDBC.<br>
        ///In this case this method returns the concatenation of a string value.
        /// </summary>
        public new static System.Nullable<long> StoredProcTest(InterSystems.Data.CacheClient.CacheConnection conn, string name, ref string response) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(name, false);
                    mtdSignature.Add(response, true);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "StoredProcTest", mtdSignature);
                    response = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// This is a sample of how to define an SQL stored procedure using a 
        ///class method. This method can be called as a stored procedure via 
        ///ODBC or JDBC.<br>
        ///This method performs an SQL update operation on the database 
        ///using embedded SQL. The update modifies the embedded properties 
        ///<var>Home.City</var> and <var>Home.State</var> for all rows whose 
        ///<var>Home.Zip</var> is equal to <var>zip</var>.
        /// </summary>
        public new static System.Nullable<long> UpdateProcTest(InterSystems.Data.CacheClient.CacheConnection conn, string zip, string city, string state) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(zip, false);
                    mtdSignature.Add(city, false);
                    mtdSignature.Add(state, false);
                    Sample.Employee.RunClassMethodS(conn, Sample.Employee.ServerClassName, "UpdateProcTest", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// writes a .png file containing the picture, if any, of this employee
        ///the purpose of this method is to prove that Picture really contains an image
        /// </summary>
        public virtual void WritePicture() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    this.RunMethodS("WritePicture", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// A sample class query that defines a result set that returns Person data 
        ///ordered by <property>Name</property>.<br>
        ///This query can be used within another Cach&eacute; method (using the
        ///<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
        ///This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
        ///<b>SP_Sample_By_Name</b>.
        /// </summary>
        public new static InterSystems.Data.CacheClient.CacheCommand ByName(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Sample.Employee_ByName(?)}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, typeof(Sample.Employee), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, typeof(Sample.Employee), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, typeof(Sample.Employee))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, timeout, typeof(Sample.Employee), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, typeof(Sample.Employee), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, timeout, typeof(Sample.Employee), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public new static Sample.Employee Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, typeof(Sample.Employee), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, typeof(Sample.Employee), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, typeof(Sample.Employee), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, typeof(Sample.Employee))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, timeout, typeof(Sample.Employee), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, typeof(Sample.Employee), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, concurrency, timeout, typeof(Sample.Employee), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public new static Sample.Employee OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Employee)(conn.OpenProxyObj(Sample.Employee.ServerClassName, id, typeof(Sample.Employee), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public new static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Employee.ExistsIdInternal(conn, Sample.Employee.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Employee.DeleteIdInternal(conn, Sample.Employee.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Sample.Employee.KillExtentInternal(conn, Sample.Employee.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public new static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Employee.ServerClassName);
            Sample.Person.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Employee.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public new static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Employee.ServerClassName);
            if (metaInfo.Validate(Sample.Employee.ClassCheckSum, Sample.Employee.PropertyInfoColn, Sample.Employee.CheckSumMethodDict, Sample.Employee.CheckSumQueryDict, Sample.Employee.GetAllPropertiesInfoColn())) {
                return;
            }
            Sample.Person.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Employee.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected new static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Employee.AllPropertiesInfoColn != null)) {
                return Sample.Employee.AllPropertiesInfoColn;
            }
            Sample.Employee.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Employee.PropertyInfoColn);
            Sample.Employee.AllPropertiesInfoColn.InsertRange(Sample.Employee.AllPropertiesInfoColn.Count, Sample.Person.GetAllPropertiesInfoColn());
            return Sample.Employee.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Employee.ServerClassName;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Sample Installer
    /// </summary>
    public partial class Installer : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Installer";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 5120;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(5);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        /// <summary>
        /// Projection of method IsUpgrade
        /// </summary>
        public static System.Nullable<bool> IsUpgrade(InterSystems.Data.CacheClient.CacheConnection conn, string pNamespace) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(pNamespace, false);
                    Sample.Installer.RunClassMethodS(conn, Sample.Installer.ServerClassName, "IsUpgrade", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Message
        /// </summary>
        public static void Message(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    Sample.Installer.RunClassMethodS(conn, Sample.Installer.ServerClassName, "Message", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Invoke the installer passing in some variables
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus RunInstall(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Installer.RunClassMethodS(conn, Sample.Installer.ServerClassName, "RunInstall", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Invoke the installer passing in some variables
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus RunInstallWithLog(InterSystems.Data.CacheClient.CacheConnection conn, string pLogfile) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pLogfile, false);
                    Sample.Installer.RunClassMethodS(conn, Sample.Installer.ServerClassName, "RunInstallWithLog", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Setup defaults for this MyApp system
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SetupDefaults(InterSystems.Data.CacheClient.CacheConnection conn, string pNamespace, System.Nullable<bool> pUpgrading) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pNamespace, false);
                    mtdSignature.Add(pUpgrading, false);
                    Sample.Installer.RunClassMethodS(conn, Sample.Installer.ServerClassName, "SetupDefaults", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Installer.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Installer.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Installer.ServerClassName);
            if (metaInfo.Validate(Sample.Installer.ClassCheckSum, Sample.Installer.PropertyInfoColn, Sample.Installer.CheckSumMethodDict, Sample.Installer.CheckSumQueryDict, Sample.Installer.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Installer.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Installer.AllPropertiesInfoColn != null)) {
                return Sample.Installer.AllPropertiesInfoColn;
            }
            Sample.Installer.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Installer.PropertyInfoColn);
            return Sample.Installer.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Installer.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Projection of class Sample.ListOfPersonIdentification
    /// </summary>
    public partial class ListOfPersonIdentification : InterSystems.Data.CacheTypes.CacheLibListOfObjects {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.ListOfPersonIdentification";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 23344;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(10);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static ListOfPersonIdentification() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.ListOfPersonIdentification", typeof(ListOfPersonIdentification));
            ;
            ;
            Sample.ListOfPersonIdentification.CheckSumMethodDict.Add("%Delete", 286);
            Sample.ListOfPersonIdentification.CheckSumMethodDict.Add("%Open", 29934);
            ;
        }
        
        /// <summary>Internal API</summary>
        public ListOfPersonIdentification() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public ListOfPersonIdentification(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.ListOfPersonIdentification.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public ListOfPersonIdentification(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.ListOfPersonIdentification.ServerClassName);
        }
        
        /// <summary>
        /// Projection of method %Delete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDelete(InterSystems.Data.CacheClient.CacheConnection conn, byte[] oid, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(oid, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.ListOfPersonIdentification.RunClassMethodS(conn, Sample.ListOfPersonIdentification.ServerClassName, "%Delete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Open
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpen(InterSystems.Data.CacheClient.CacheConnection conn, byte[] initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.ListOfPersonIdentification.RunClassMethodS(conn, Sample.ListOfPersonIdentification.ServerClassName, "%Open", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.ListOfPersonIdentification.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.ListOfPersonIdentification.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.ListOfPersonIdentification.ServerClassName);
            if (metaInfo.Validate(Sample.ListOfPersonIdentification.ClassCheckSum, Sample.ListOfPersonIdentification.PropertyInfoColn, Sample.ListOfPersonIdentification.CheckSumMethodDict, Sample.ListOfPersonIdentification.CheckSumQueryDict, Sample.ListOfPersonIdentification.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.ListOfPersonIdentification.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.ListOfPersonIdentification.AllPropertiesInfoColn != null)) {
                return Sample.ListOfPersonIdentification.AllPropertiesInfoColn;
            }
            Sample.ListOfPersonIdentification.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.ListOfPersonIdentification.PropertyInfoColn);
            return Sample.ListOfPersonIdentification.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.ListOfPersonIdentification.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This class is used by the example code in the THROW documentation
    /// </summary>
    public partial class MyException : InterSystems.Data.CacheTypes.CacheObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.MyException";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 49742;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(27);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(6);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static MyException() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.MyException", typeof(MyException));
            ;
            ;
            ;
        }
        
        /// <summary>Internal API</summary>
        public MyException() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public MyException(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.MyException.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public MyException(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.MyException.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.MyException.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.MyException.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.MyException.ServerClassName);
            if (metaInfo.Validate(Sample.MyException.ClassCheckSum, Sample.MyException.PropertyInfoColn, Sample.MyException.CheckSumMethodDict, Sample.MyException.CheckSumQueryDict, Sample.MyException.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.MyException.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.MyException.AllPropertiesInfoColn != null)) {
                return Sample.MyException.AllPropertiesInfoColn;
            }
            Sample.MyException.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.MyException.PropertyInfoColn);
            return Sample.MyException.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.MyException.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This sample persistent class represents a person.
    ///<p>Maintenance note: This class is used by some of the bindings samples.
    /// </summary>
    public partial class Person : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Person";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(58);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(8);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Person() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Person", typeof(Person));
            ;
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Age", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 35645));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DOB", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 49942));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("FavoriteColors", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfDT, 45590));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Home", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 62725));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Office", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 62725));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("SSN", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Person.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Spouse", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 57059));
            ;
            Sample.Person.CheckSumMethodDict.Add("Addition", 51540);
            Sample.Person.CheckSumMethodDict.Add("CurrentAge", 22014);
            Sample.Person.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            Sample.Person.CheckSumMethodDict.Add("IDKEYExists", 13237);
            Sample.Person.CheckSumMethodDict.Add("IDKEYOpen", 7502);
            Sample.Person.CheckSumMethodDict.Add("NameIDXExists", 10116);
            Sample.Person.CheckSumMethodDict.Add("NinetyNine", 5360);
            Sample.Person.CheckSumMethodDict.Add("PrintPerson", 6932);
            Sample.Person.CheckSumMethodDict.Add("PrintPersons", 56133);
            Sample.Person.CheckSumMethodDict.Add("PrintPersonsSQL", 56133);
            Sample.Person.CheckSumMethodDict.Add("SSNKeyDelete", 34248);
            Sample.Person.CheckSumMethodDict.Add("SSNKeyExists", 10116);
            Sample.Person.CheckSumMethodDict.Add("SSNKeyOpen", 54266);
            Sample.Person.CheckSumMethodDict.Add("StoredProcTest", 18216);
            Sample.Person.CheckSumMethodDict.Add("UpdateProcTest", 29231);
            ;
            Sample.Person.CheckSumQueryDict.Add("ByName", 16223);
        }
        
        /// <summary>Internal API</summary>
        public Person() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Person(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Person.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Person(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Person.ServerClassName);
        }
        
        /// <summary>
        /// Person's age.<br>
        ///This is a calculated field whose value is derived from <property>DOB</property>.
        /// </summary>
        public virtual System.Nullable<long> Age {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("Age", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's Date of Birth.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate DOB {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("DOB", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("DOB", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// A collection of strings representing the person's favorite colors.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheListOfStrings FavoriteColors {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientObjTypeId.tListOfDT, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("FavoriteColors", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheListOfStrings)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("FavoriteColors", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's home address. This uses an embedded object.
        /// </summary>
        public virtual Sample.Address Home {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Address));
                        this.GetPropertyS("Home", mtdSignature);
                        return ((Sample.Address)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Home", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's name.
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's office address. This uses an embedded object.
        /// </summary>
        public virtual Sample.Address Office {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Address));
                        this.GetPropertyS("Office", mtdSignature);
                        return ((Sample.Address)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Office", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's Social Security number. This is validated using pattern match.
        /// </summary>
        public virtual string SSN {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("SSN", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("SSN", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's spouse. This is a reference to another persistent object.
        /// </summary>
        public virtual Sample.Person Spouse {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Person));
                        this.GetPropertyS("Spouse", mtdSignature);
                        return ((Sample.Person)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Spouse", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// A simple, sample method: add two numbers (<var>x</var> and <var>y</var>) 
        ///and return the result.
        /// </summary>
        public virtual System.Nullable<long> Addition(System.Nullable<long> x, System.Nullable<long> y) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(x, false);
                    mtdSignature.Add(y, false);
                    this.RunMethodS("Addition", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// This class method calculates a current age given a date of birth <var>date</var>.
        /// </summary>
        public static System.Nullable<long> CurrentAge(InterSystems.Data.CacheClient.CacheConnection conn, InterSystems.Data.CacheTypes.CacheDate date) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(date, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "CurrentAge", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static Sample.Person IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Person));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Person)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method NameIDXExists
        /// </summary>
        public static System.Nullable<bool> NameIDXExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameIDXExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// A simple, sample expression method: returns the value 99.
        /// </summary>
        public virtual System.Nullable<long> NinetyNine() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    this.RunMethodS("NinetyNine", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Prints the property <property>Name</property> to the console.
        /// </summary>
        public virtual void PrintPerson() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    this.RunMethodS("PrintPerson", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
        ///within the database.
        /// </summary>
        public static void PrintPersons(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PrintPersons", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Prints out data on all persons within the database using SQL to 
        ///iterate over all the person data.
        /// </summary>
        public static void PrintPersonsSQL(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PrintPersonsSQL", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SSNKeyDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SSNKeyDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "SSNKeyDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SSNKeyExists
        /// </summary>
        public static System.Nullable<bool> SSNKeyExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "SSNKeyExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SSNKeyOpen
        /// </summary>
        public static Sample.Person SSNKeyOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Person));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "SSNKeyOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Person)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// This is a sample of how to define an SQL stored procedure using a 
        ///class method. This method can be called as a stored procedure via 
        ///ODBC or JDBC.<br>
        ///In this case this method returns the concatenation of a string value.
        /// </summary>
        public static System.Nullable<long> StoredProcTest(InterSystems.Data.CacheClient.CacheConnection conn, string name, ref string response) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(name, false);
                    mtdSignature.Add(response, true);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "StoredProcTest", mtdSignature);
                    response = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// This is a sample of how to define an SQL stored procedure using a 
        ///class method. This method can be called as a stored procedure via 
        ///ODBC or JDBC.<br>
        ///This method performs an SQL update operation on the database 
        ///using embedded SQL. The update modifies the embedded properties 
        ///<var>Home.City</var> and <var>Home.State</var> for all rows whose 
        ///<var>Home.Zip</var> is equal to <var>zip</var>.
        /// </summary>
        public static System.Nullable<long> UpdateProcTest(InterSystems.Data.CacheClient.CacheConnection conn, string zip, string city, string state) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(zip, false);
                    mtdSignature.Add(city, false);
                    mtdSignature.Add(state, false);
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "UpdateProcTest", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// A sample class query that defines a result set that returns Person data 
        ///ordered by <property>Name</property>.<br>
        ///This query can be used within another Cach&eacute; method (using the
        ///<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
        ///This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
        ///<b>SP_Sample_By_Name</b>.
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand ByName(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call Sample.SP_Sample_By_Name(?)}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, typeof(Sample.Person), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, typeof(Sample.Person), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, typeof(Sample.Person))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, typeof(Sample.Person), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, typeof(Sample.Person), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, typeof(Sample.Person), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Person Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, typeof(Sample.Person), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, typeof(Sample.Person), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, typeof(Sample.Person), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, typeof(Sample.Person))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, typeof(Sample.Person), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, typeof(Sample.Person), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, typeof(Sample.Person), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Person OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Person)(conn.OpenProxyObj(Sample.Person.ServerClassName, id, typeof(Sample.Person), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Person.ExistsIdInternal(conn, Sample.Person.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Person.DeleteIdInternal(conn, Sample.Person.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Sample.Person.KillExtentInternal(conn, Sample.Person.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Person.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Person.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Person.ServerClassName);
            if (metaInfo.Validate(Sample.Person.ClassCheckSum, Sample.Person.PropertyInfoColn, Sample.Person.CheckSumMethodDict, Sample.Person.CheckSumQueryDict, Sample.Person.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Person.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Person.AllPropertiesInfoColn != null)) {
                return Sample.Person.AllPropertiesInfoColn;
            }
            Sample.Person.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Person.PropertyInfoColn);
            return Sample.Person.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Person.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This sample registered object represent the identification information for a person.  
    ///This class is used to illustrate return a list of objects using XML.
    /// </summary>
    public partial class PersonIdentification : InterSystems.Data.CacheTypes.CacheObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.PersonIdentification";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 49742;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(14);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(4);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static PersonIdentification() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.PersonIdentification", typeof(PersonIdentification));
            ;
            Sample.PersonIdentification.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DOB", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 49942));
            Sample.PersonIdentification.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ID", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.PersonIdentification.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.PersonIdentification.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("SSN", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            ;
        }
        
        /// <summary>Internal API</summary>
        public PersonIdentification() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public PersonIdentification(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.PersonIdentification.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public PersonIdentification(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.PersonIdentification.ServerClassName);
        }
        
        /// <summary>
        /// Person's Date of Birth.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate DOB {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("DOB", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("DOB", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Id of Person record in the database.
        /// </summary>
        public virtual string ID {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("ID", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ID", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's name.
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Person's Social Security number. This is validated using pattern match.
        /// </summary>
        public virtual string SSN {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("SSN", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("SSN", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.PersonIdentification.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.PersonIdentification.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.PersonIdentification.ServerClassName);
            if (metaInfo.Validate(Sample.PersonIdentification.ClassCheckSum, Sample.PersonIdentification.PropertyInfoColn, Sample.PersonIdentification.CheckSumMethodDict, Sample.PersonIdentification.CheckSumQueryDict, Sample.PersonIdentification.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.PersonIdentification.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.PersonIdentification.AllPropertiesInfoColn != null)) {
                return Sample.PersonIdentification.AllPropertiesInfoColn;
            }
            Sample.PersonIdentification.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.PersonIdentification.PropertyInfoColn);
            return Sample.PersonIdentification.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.PersonIdentification.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// <p>Sample.ResultSets
    ///</p>
    ///<p>
    ///This class contains several methods that show how to instantiate and interact with result sets
    ///using dynamic SQL. Some of these methods can be called as stored procedures. Class methods that
    ///are SQLPROCs can also be executed from the command line and if they RETURNRESULTSETS then
    ///those results can be displayed by calling %sqlcontext.%Display(). In addition, the methods projected
    ///as SQLPROC can be called using dynamic SQL - either from the command line or through the SQL Shell.
    ///Examples of different call styles are described for each method.
    ///</p>
    ///<p>
    ///A 'result set' is an instance of %SQL.IResultSet. A result set can be returned by executing a
    ///dynamic SQL SELECT or CALL statement. There are many different result set classes but they all
    ///implement the interface of %SQL.IResultSet. There are some legacy result set classes that extend
    ///%Library.IResultSet. The %Library.IResultSet interface is almost completely compatible with %SQL.IResultSet.
    ///The most significant difference being some subtle differences in the metadata classes.
    ///</p>
    ///<p>
    ///The simplest way to instantiate a result set is to execute a dynamic SQL SELECT statement. All
    ///dynamic SQL statements return an instance of %SQL.StatementResult. %SQL.StatementResult is the
    ///output statement descriptor and it defines the result interface. If the statement result object is
    ///a result set object then %ResultColumnCount is greater than zero.
    ///</p>
    ///<p>
    ///Result sets can also be returned by executing a CALL statement. There are two ways to return result sets
    ///from an SQL invoked routine (SIR). The first is referred to in the SQL standard as a "prepared cursor".
    ///A prepared cursor result is returned by calling a stored procedure projected from a class query.
    ///</p>
    ///<p>
    ///The second mechanism allows for multiple result sets to be returned from an SQL invoked routine (stored
    ///procedure) that is projected by a class method that is defined to return result sets. The collection
    ///of result sets returned by calling such a routine (SIR) is referred to as a "result set sequence" or "RSS".
    ///When a SIR that returns a non-empty result set sequence (RSS) is called then a "procedural cursor" is
    ///automatically associated with the statement result object. The initial state of this cursor is unbound,
    ///meaning that it is not yet bound to the first result set from the returned RSS. If the procedural cursor is
    ///referenced, either directly or indirectly, then it will be bound to the next result set in the RSS
    ///and that result set is removed from the RSS.
    ///</p>
    ///<p>
    ///The result bound to the procedural cursor can be processed directly through the statement result object.
    ///When the caller is finished with the result set currently bound the next result set can be bound by calling
    ///the %MoreResults() method on the statement result object. That process can continue until all result sets from
    ///the RSS have been processed. When that happens, %MoreResults returns zero to indicate that there are no more
    ///result sets available for binding.
    ///</p>
    ///<p>
    ///This type of binding and processing of result sets from a RSS is referred to as "serial binding". There is another
    ///way to access result sets from an RSS returned by a call statement. This binding is accomplished by calling
    ///the %NextResult() method on the statement result object. If %NextResult() returns a null oref then there are no
    ///more result sets available for binding. Otherwise, an oref referencing a result set object will be returned and
    ///the result set is removed from the RSS, making the next result available for binding immediately and can be bound
    ///by invoking %NextResult() again. This style of binding is referred to as "parallel binding". The procedural cursor
    ///is not bound to a result set when using this style of binding. Instead, a local variable or some other COS target
    ///is bound to the result set. Several result sets can be bound at the same timed, hence the name "parallel binding".
    ///</p>
    ///<p>
    ///If the caller mixes calls to the procedural cursor and %MoreResults() with calls to %NextResult() then a combination
    ///of serial and parallel binding occurs. If the procedural cursor is referenced, binding the next result to the procedural cursor,
    ///then a subsequent call to %NextResult() will bind to the result following the serially bound result. %NextResult()
    ///removes the returned result set from the RSS and subsequent requests for a serially bound result will proceed with the
    ///next result set in the sequence.
    ///</p>
    /// </summary>
    public partial class ResultSets : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.ResultSets";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 5120;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(2);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        /// <summary>
        /// CustomSets() is an example of a class method, projected as an SQL-callable routine, that returns two
        ///result sets.
        ///
        ///		{call Sample.CustomSets()}
        ///
        ///	If you call this method as a stored procedure from the WinSQL Query window it should
        ///		display two result sets and a message window indicating the number of rows in each set.
        /// </summary>
        public static System.Nullable<long> CustomSets(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    Sample.ResultSets.RunClassMethodS(conn, Sample.ResultSets.ServerClassName, "CustomSets", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Here is an example of a classmethod (also projected as a stored procedure) that returns a result set sequence (RSS)
        ///containing two result sets. This method can be called directly as a class method and the results displayed from the
        ///current procedure context:
        ///	<pre>
        ///			set return = ##class(Sample.ResultSets).PersonSets("D","NY")
        ///			do %sqlcontext.%Display()
        ///</pre>
        ///<br>Or by a dynamic statement:
        ///<pre>
        ///			set result = ##class(%SQL.Statement).%ExecDirect(,"call Sample.PersonSets('D','NY')")
        ///			do result.%Display()
        ///</pre>
        ///<br>
        ///This method can also be invoked through the SQL Shell:
        ///<pre>
        ///SAMPLES>d $system.SQL.Shell()
        ///SQL Command Line Shell
        ///----------------------------------------------------
        ///Enter q to quit, ? for help.
        ///SAMPLES>>set selectmode = display
        ///
        ///selectmode = display
        ///SAMPLES>>call Sample.PersonSets('A','NY')
        ///1.	call Sample.PersonSets('A','NY')
        ///
        ///Dumping result #1
        ///Name	DOB	Spouse	
        ///Adam,Phyllis P.	10/26/2007	109
        ///Adam,Vincent A.	10/18/1945	3
        ///Adams,Dave M.	02/09/1938	29
        ///Adams,Elmo R.	07/17/1975	22
        ///Adams,Kirsten F.	03/22/1980	9
        ///Adams,Stuart M.	07/31/1987	6
        ///Allen,Zoe H.	11/17/1970	35
        ///Alton,Charlotte S.	02/13/1940	2
        ///Alton,Nellie W.	10/21/2000	11
        ///Anderson,Heloisa E.	08/05/1951	
        ///Avery,Jeff J.	08/01/2005	133
        ///
        ///11 Rows(s) Affected
        ///
        ///Dumping result #2
        ///Name	Age	Home_City	Home_State	
        ///
        ///0 Rows(s) Affected
        ///---------------------------------------------------------------------------
        ///</pre>
        ///And finally, it can be called from an xDBC client:
        ///
        ///	{call Sample.PersonSets('A','NY')}
        ///
        ///	The result should be two result sets displayed (in WinSQL anyway).
        /// </summary>
        public static System.Nullable<long> PersonSets(InterSystems.Data.CacheClient.CacheConnection conn, string name, string state) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                    mtdSignature.Add(name, false);
                    mtdSignature.Add(state, false);
                    Sample.ResultSets.RunClassMethodS(conn, Sample.ResultSets.ServerClassName, "PersonSets", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.ResultSets.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.ResultSets.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.ResultSets.ServerClassName);
            if (metaInfo.Validate(Sample.ResultSets.ClassCheckSum, Sample.ResultSets.PropertyInfoColn, Sample.ResultSets.CheckSumMethodDict, Sample.ResultSets.CheckSumQueryDict, Sample.ResultSets.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.ResultSets.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.ResultSets.AllPropertiesInfoColn != null)) {
                return Sample.ResultSets.AllPropertiesInfoColn;
            }
            Sample.ResultSets.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.ResultSets.PropertyInfoColn);
            return Sample.ResultSets.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.ResultSets.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Task definition is divided into two sections
    ///		- The task schedule; when it will run
    ///		- The task class; what it will do when it is running
    ///
    ///Generally tasks should be scheduled using the system management portal.
    ///If you need to schedule tasks programatically you can find examples at the bottom of this class.
    ///
    ///A series of task classes are defined to demonstrate potential usage
    ///For these examples we rely on the MailServer being set 
    ///	System Management Portal [Home]> [Configuration] > [Task Manager Settings] > [E-Mail Settings] 
    ///		The SMTP server must be defined, also any authorization which is required for the mail server
    ///Sample.Task
    ///		Demonstrate what happens when a task encounters a runtime error
    ///
    ///Sample.TaskExample1
    ///		Demonstrates a task which fails every other time it executes
    ///Sample.TaskExample2
    ///		Using output files
    ///Sample.TaskExample3
    ///		Demonstrates how to look for problems with your tasks (not running)
    ///
    ///
    ///Edit this class and change the who@somecompany.com to your email address 
    ///
    /// </summary>
    public partial class Task : SysSYS.Task.Definition {
        
        /// <summary>Server class name</summary>
        public new const string ServerClassName = "Sample.Task";
        
        /// <summary>Meta information checksum</summary>
        public new const long ClassCheckSum = 26004;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(15);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Task() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Task", typeof(Task));
            ;
            Sample.Task.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("RunCount", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.Task.CheckSumMethodDict.Add("AlternativeOnTask", 6533);
            Sample.Task.CheckSumMethodDict.Add("ScheduleAfterAnother", 55764);
            Sample.Task.CheckSumMethodDict.Add("ScheduleHourly", 55764);
            Sample.Task.CheckSumMethodDict.Add("ScheduleMonthly", 55764);
            Sample.Task.CheckSumMethodDict.Add("ScheduleOnceDaily", 55764);
            Sample.Task.CheckSumMethodDict.Add("ScheduleWeekly", 55764);
            Sample.Task.CheckSumMethodDict.Add("SuspendAndResumeTask", 55764);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Task() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Task(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Task.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Task(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Task.ServerClassName);
        }
        
        /// <summary>
        /// Property to keep track of how many times this task has run
        /// </summary>
        public virtual string RunCount {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("RunCount", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("RunCount", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Assuming that you want to handle an error it is safe do the following
        ///it is just unsafe to Set $ZT="^%ETN" as this ends with a Halt
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus AlternativeOnTask() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    this.RunMethodS("AlternativeOnTask", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// this will schedule a task to run after another task has completed
        ///since JournalSwitch happens on all systems we will use that as our trigger task
        ///but any task could easily be substituted
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ScheduleAfterAnother(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Task.RunClassMethodS(conn, Sample.Task.ServerClassName, "ScheduleAfterAnother", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Example code to demonstrate programatically scheduling a task to run EveryHour between 9am - 5pm
        ///In this example Expires=0 and therefore the task will run every time it is scheduled, this is useful
        ///for cases where reports need to be generated based on a certain time, the report needs to be run
        ///after the time has passed, it can't be skipped.  In this case you would probably use ..%RunDate 
        ///and ..%RunTime in the OnTask method
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ScheduleHourly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Task.RunClassMethodS(conn, Sample.Task.ServerClassName, "ScheduleHourly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run monthly on the first Monday at 5:00 am 
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ScheduleMonthly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Task.RunClassMethodS(conn, Sample.Task.ServerClassName, "ScheduleMonthly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// this will schedule a task to run Once every day at 10:30 am
        ///this example does not take into account any task 'Settings'
        ///In this example, if the task has not run within 18 hours and 30 minutes of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ScheduleOnceDaily(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Task.RunClassMethodS(conn, Sample.Task.ServerClassName, "ScheduleOnceDaily", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run weekly at 3:00 am on Wednesday between January 31, 2014 and February 15, 2014
        ///In this example, if the task has not run within 5 days of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ScheduleWeekly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Task.RunClassMethodS(conn, Sample.Task.ServerClassName, "ScheduleWeekly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// example programatically suspending and then resuming a task
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SuspendAndResumeTask(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.Task.RunClassMethodS(conn, Sample.Task.ServerClassName, "SuspendAndResumeTask", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public new static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Task.ServerClassName);
            SysSYS.Task.Definition.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Task.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public new static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Task.ServerClassName);
            if (metaInfo.Validate(Sample.Task.ClassCheckSum, Sample.Task.PropertyInfoColn, Sample.Task.CheckSumMethodDict, Sample.Task.CheckSumQueryDict, Sample.Task.GetAllPropertiesInfoColn())) {
                return;
            }
            SysSYS.Task.Definition.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Task.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected new static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Task.AllPropertiesInfoColn != null)) {
                return Sample.Task.AllPropertiesInfoColn;
            }
            Sample.Task.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Task.PropertyInfoColn);
            Sample.Task.AllPropertiesInfoColn.InsertRange(Sample.Task.AllPropertiesInfoColn.Count, SysSYS.Task.Definition.GetAllPropertiesInfoColn());
            return Sample.Task.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Task.ServerClassName;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Defining a task for End Users
    ///
    ///You want to generate a standard report that the user schedules to run, allowing them the
    ///flexibility to choose when it runs.
    ///By assigning Properties to the Class we can make items configurable such as where the 
    ///report will be directed and perhaps a heading to be displayed.
    ///
    ///The System Management Portal will automatically display the properties for Printer and Heading
    ///and will validate that Printer is not ""  You can add any logic you would like to any property
    /// </summary>
    public partial class TaskExample1 : Sample.Task {
        
        /// <summary>Server class name</summary>
        public new const string ServerClassName = "Sample.TaskExample1";
        
        /// <summary>Meta information checksum</summary>
        public new const long ClassCheckSum = 3203;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(17);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static TaskExample1() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.TaskExample1", typeof(TaskExample1));
            ;
            Sample.TaskExample1.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Heading", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.TaskExample1.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Printer", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.TaskExample1.CheckSumMethodDict.Add("PrinterIsValid", 44388);
            Sample.TaskExample1.CheckSumMethodDict.Add("ScheduleAfterAnother", 6421);
            Sample.TaskExample1.CheckSumMethodDict.Add("ScheduleHourly", 6421);
            Sample.TaskExample1.CheckSumMethodDict.Add("ScheduleMonthly", 6421);
            Sample.TaskExample1.CheckSumMethodDict.Add("ScheduleOnceDaily", 6421);
            Sample.TaskExample1.CheckSumMethodDict.Add("ScheduleWeekly", 6421);
            Sample.TaskExample1.CheckSumMethodDict.Add("SuspendAndResumeTask", 6421);
            ;
        }
        
        /// <summary>Internal API</summary>
        public TaskExample1() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public TaskExample1(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.TaskExample1.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public TaskExample1(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.TaskExample1.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property Heading
        /// </summary>
        public virtual string Heading {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Heading", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Heading", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Output printer for report
        /// </summary>
        public virtual string Printer {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Printer", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Printer", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method PrinterIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus PrinterIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string Printer) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(Printer, false);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "PrinterIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// this will schedule a task to run after another task has completed
        ///since JournalSwitch happens on all systems we will use that as our trigger task
        ///but any task could easily be substituted
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleAfterAnother(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "ScheduleAfterAnother", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Example code to demonstrate programatically scheduling a task to run EveryHour between 9am - 5pm
        ///In this example Expires=0 and therefore the task will run every time it is scheduled, this is useful
        ///for cases where reports need to be generated based on a certain time, the report needs to be run
        ///after the time has passed, it can't be skipped.  In this case you would probably use ..%RunDate 
        ///and ..%RunTime in the OnTask method
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleHourly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "ScheduleHourly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run monthly on the first Monday at 5:00 am 
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleMonthly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "ScheduleMonthly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// this will schedule a task to run Once every day at 10:30 am
        ///this example does not take into account any task 'Settings'
        ///In this example, if the task has not run within 18 hours and 30 minutes of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleOnceDaily(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "ScheduleOnceDaily", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run weekly at 3:00 am on Wednesday between January 31, 2014 and February 15, 2014
        ///In this example, if the task has not run within 5 days of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleWeekly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "ScheduleWeekly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// example programatically suspending and then resuming a task
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus SuspendAndResumeTask(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample1.RunClassMethodS(conn, Sample.TaskExample1.ServerClassName, "SuspendAndResumeTask", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public new static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.TaskExample1.ServerClassName);
            Sample.Task.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.TaskExample1.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public new static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.TaskExample1.ServerClassName);
            if (metaInfo.Validate(Sample.TaskExample1.ClassCheckSum, Sample.TaskExample1.PropertyInfoColn, Sample.TaskExample1.CheckSumMethodDict, Sample.TaskExample1.CheckSumQueryDict, Sample.TaskExample1.GetAllPropertiesInfoColn())) {
                return;
            }
            Sample.Task.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.TaskExample1.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected new static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.TaskExample1.AllPropertiesInfoColn != null)) {
                return Sample.TaskExample1.AllPropertiesInfoColn;
            }
            Sample.TaskExample1.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.TaskExample1.PropertyInfoColn);
            Sample.TaskExample1.AllPropertiesInfoColn.InsertRange(Sample.TaskExample1.AllPropertiesInfoColn.Count, Sample.Task.GetAllPropertiesInfoColn());
            return Sample.TaskExample1.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.TaskExample1.ServerClassName;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Defining a task using output files
    ///
    ///Perhaps you would like to generate a report to a file and email the file to a group of users
    ///when it is completed.
    ///
    ///In an end user scenario you could have them just define the recipient list and the output directory / filename
    ///and the standard report goes out to the group on schedule.
    ///
    /// </summary>
    public partial class TaskExample2 : Sample.Task {
        
        /// <summary>Server class name</summary>
        public new const string ServerClassName = "Sample.TaskExample2";
        
        /// <summary>Meta information checksum</summary>
        public new const long ClassCheckSum = 3203;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(11);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static TaskExample2() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.TaskExample2", typeof(TaskExample2));
            ;
            ;
            Sample.TaskExample2.CheckSumMethodDict.Add("ScheduleAfterAnother", 6421);
            Sample.TaskExample2.CheckSumMethodDict.Add("ScheduleHourly", 6421);
            Sample.TaskExample2.CheckSumMethodDict.Add("ScheduleMonthly", 6421);
            Sample.TaskExample2.CheckSumMethodDict.Add("ScheduleOnceDaily", 6421);
            Sample.TaskExample2.CheckSumMethodDict.Add("ScheduleWeekly", 6421);
            Sample.TaskExample2.CheckSumMethodDict.Add("SuspendAndResumeTask", 6421);
            ;
        }
        
        /// <summary>Internal API</summary>
        public TaskExample2() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public TaskExample2(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.TaskExample2.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public TaskExample2(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.TaskExample2.ServerClassName);
        }
        
        /// <summary>
        /// this will schedule a task to run after another task has completed
        ///since JournalSwitch happens on all systems we will use that as our trigger task
        ///but any task could easily be substituted
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleAfterAnother(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample2.RunClassMethodS(conn, Sample.TaskExample2.ServerClassName, "ScheduleAfterAnother", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Example code to demonstrate programatically scheduling a task to run EveryHour between 9am - 5pm
        ///In this example Expires=0 and therefore the task will run every time it is scheduled, this is useful
        ///for cases where reports need to be generated based on a certain time, the report needs to be run
        ///after the time has passed, it can't be skipped.  In this case you would probably use ..%RunDate 
        ///and ..%RunTime in the OnTask method
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleHourly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample2.RunClassMethodS(conn, Sample.TaskExample2.ServerClassName, "ScheduleHourly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run monthly on the first Monday at 5:00 am 
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleMonthly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample2.RunClassMethodS(conn, Sample.TaskExample2.ServerClassName, "ScheduleMonthly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// this will schedule a task to run Once every day at 10:30 am
        ///this example does not take into account any task 'Settings'
        ///In this example, if the task has not run within 18 hours and 30 minutes of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleOnceDaily(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample2.RunClassMethodS(conn, Sample.TaskExample2.ServerClassName, "ScheduleOnceDaily", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run weekly at 3:00 am on Wednesday between January 31, 2014 and February 15, 2014
        ///In this example, if the task has not run within 5 days of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleWeekly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample2.RunClassMethodS(conn, Sample.TaskExample2.ServerClassName, "ScheduleWeekly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// example programatically suspending and then resuming a task
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus SuspendAndResumeTask(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample2.RunClassMethodS(conn, Sample.TaskExample2.ServerClassName, "SuspendAndResumeTask", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public new static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.TaskExample2.ServerClassName);
            Sample.Task.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.TaskExample2.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public new static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.TaskExample2.ServerClassName);
            if (metaInfo.Validate(Sample.TaskExample2.ClassCheckSum, Sample.TaskExample2.PropertyInfoColn, Sample.TaskExample2.CheckSumMethodDict, Sample.TaskExample2.CheckSumQueryDict, Sample.TaskExample2.GetAllPropertiesInfoColn())) {
                return;
            }
            Sample.Task.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.TaskExample2.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected new static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.TaskExample2.AllPropertiesInfoColn != null)) {
                return Sample.TaskExample2.AllPropertiesInfoColn;
            }
            Sample.TaskExample2.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.TaskExample2.PropertyInfoColn);
            Sample.TaskExample2.AllPropertiesInfoColn.InsertRange(Sample.TaskExample2.AllPropertiesInfoColn.Count, Sample.Task.GetAllPropertiesInfoColn());
            return Sample.TaskExample2.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.TaskExample2.ServerClassName;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// Find any tasks which should be running but have not
    ///
    ///Edit this class and change the who@somecompany.com to your email address and update the smtp server
    ///in the SendMail method before scheduling
    /// </summary>
    public partial class TaskExample3 : Sample.Task {
        
        /// <summary>Server class name</summary>
        public new const string ServerClassName = "Sample.TaskExample3";
        
        /// <summary>Meta information checksum</summary>
        public new const long ClassCheckSum = 3203;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(18);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static TaskExample3() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.TaskExample3", typeof(TaskExample3));
            ;
            Sample.TaskExample3.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Notify", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.TaskExample3.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("NotifyOnOK", InterSystems.Data.CacheTypes.ClientTypeId.tBool, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 56241));
            ;
            Sample.TaskExample3.CheckSumMethodDict.Add("ScheduleAfterAnother", 6421);
            Sample.TaskExample3.CheckSumMethodDict.Add("ScheduleHourly", 6421);
            Sample.TaskExample3.CheckSumMethodDict.Add("ScheduleMonthly", 6421);
            Sample.TaskExample3.CheckSumMethodDict.Add("ScheduleOnceDaily", 6421);
            Sample.TaskExample3.CheckSumMethodDict.Add("ScheduleWeekly", 6421);
            Sample.TaskExample3.CheckSumMethodDict.Add("SendMail", 27957);
            Sample.TaskExample3.CheckSumMethodDict.Add("SuspendAndResumeTask", 6421);
            ;
        }
        
        /// <summary>Internal API</summary>
        public TaskExample3() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public TaskExample3(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.TaskExample3.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public TaskExample3(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.TaskExample3.ServerClassName);
        }
        
        /// <summary>
        /// list of email addresses ; delimited to notify 
        /// </summary>
        public virtual string Notify {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Notify", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Notify", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// HealthCheck if set to 1 - Will notify that all jobs are completing successfully
        /// </summary>
        public virtual System.Nullable<bool> NotifyOnOK {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                        this.GetPropertyS("NotifyOnOK", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("NotifyOnOK", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// this will schedule a task to run after another task has completed
        ///since JournalSwitch happens on all systems we will use that as our trigger task
        ///but any task could easily be substituted
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleAfterAnother(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample3.RunClassMethodS(conn, Sample.TaskExample3.ServerClassName, "ScheduleAfterAnother", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Example code to demonstrate programatically scheduling a task to run EveryHour between 9am - 5pm
        ///In this example Expires=0 and therefore the task will run every time it is scheduled, this is useful
        ///for cases where reports need to be generated based on a certain time, the report needs to be run
        ///after the time has passed, it can't be skipped.  In this case you would probably use ..%RunDate 
        ///and ..%RunTime in the OnTask method
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleHourly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample3.RunClassMethodS(conn, Sample.TaskExample3.ServerClassName, "ScheduleHourly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run monthly on the first Monday at 5:00 am 
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleMonthly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample3.RunClassMethodS(conn, Sample.TaskExample3.ServerClassName, "ScheduleMonthly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Example showing schedule with saving custom property values (Notify, NotifyOnOK)
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleOnceDaily(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample3.RunClassMethodS(conn, Sample.TaskExample3.ServerClassName, "ScheduleOnceDaily", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Schedule task to run weekly at 3:00 am on Wednesday between January 31, 2014 and February 15, 2014
        ///In this example, if the task has not run within 5 days of the scheduled start it will
        ///"Expire" and not run again until the next start time
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus ScheduleWeekly(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample3.RunClassMethodS(conn, Sample.TaskExample3.ServerClassName, "ScheduleWeekly", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method SendMail
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus SendMail(string pMessage) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(pMessage, false);
                    this.RunMethodS("SendMail", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// example programatically suspending and then resuming a task
        /// </summary>
        public new static InterSystems.Data.CacheTypes.CacheStatus SuspendAndResumeTask(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    Sample.TaskExample3.RunClassMethodS(conn, Sample.TaskExample3.ServerClassName, "SuspendAndResumeTask", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public new static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.TaskExample3.ServerClassName);
            Sample.Task.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.TaskExample3.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public new static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.TaskExample3.ServerClassName);
            if (metaInfo.Validate(Sample.TaskExample3.ClassCheckSum, Sample.TaskExample3.PropertyInfoColn, Sample.TaskExample3.CheckSumMethodDict, Sample.TaskExample3.CheckSumQueryDict, Sample.TaskExample3.GetAllPropertiesInfoColn())) {
                return;
            }
            Sample.Task.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.TaskExample3.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected new static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.TaskExample3.AllPropertiesInfoColn != null)) {
                return Sample.TaskExample3.AllPropertiesInfoColn;
            }
            Sample.TaskExample3.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.TaskExample3.PropertyInfoColn);
            Sample.TaskExample3.AllPropertiesInfoColn.InsertRange(Sample.TaskExample3.AllPropertiesInfoColn.Count, Sample.Task.GetAllPropertiesInfoColn());
            return Sample.TaskExample3.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.TaskExample3.ServerClassName;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This class represents a U.S. ZIP (Zone Improvement Plan) 
    ///Code and corresponding State and City name. The sample dataset
    ///includes values for the northeastern United States.
    /// </summary>
    public partial class USZipCode : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.USZipCode";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(23);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(5);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static USZipCode() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.USZipCode", typeof(USZipCode));
            ;
            Sample.USZipCode.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("City", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.USZipCode.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Latitude", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 21513));
            Sample.USZipCode.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Longitude", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 21513));
            Sample.USZipCode.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("State", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.USZipCode.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("ZipCode", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.USZipCode.CheckSumMethodDict.Add("ZipIDXDelete", 46328);
            Sample.USZipCode.CheckSumMethodDict.Add("ZipIDXExists", 13237);
            Sample.USZipCode.CheckSumMethodDict.Add("ZipIDXOpen", 56657);
            ;
        }
        
        /// <summary>Internal API</summary>
        public USZipCode() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public USZipCode(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.USZipCode.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public USZipCode(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.USZipCode.ServerClassName);
        }
        
        /// <summary>
        /// A city name.
        /// </summary>
        public virtual string City {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("City", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("City", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Latitude
        /// </summary>
        public virtual System.Nullable<double> Latitude {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Latitude", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Latitude", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Longitude
        /// </summary>
        public virtual System.Nullable<double> Longitude {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Longitude", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Longitude", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// A 2 letter state abbreviation.
        /// </summary>
        public virtual string State {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("State", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("State", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// The 5-digit ZIP Code value.
        /// </summary>
        public virtual string ZipCode {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("ZipCode", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("ZipCode", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method ZipIDXDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus ZipIDXDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.USZipCode.RunClassMethodS(conn, Sample.USZipCode.ServerClassName, "ZipIDXDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ZipIDXExists
        /// </summary>
        public static System.Nullable<bool> ZipIDXExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.USZipCode.RunClassMethodS(conn, Sample.USZipCode.ServerClassName, "ZipIDXExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method ZipIDXOpen
        /// </summary>
        public static Sample.USZipCode ZipIDXOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.USZipCode));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.USZipCode.RunClassMethodS(conn, Sample.USZipCode.ServerClassName, "ZipIDXOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.USZipCode)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, typeof(Sample.USZipCode), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, typeof(Sample.USZipCode), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, typeof(Sample.USZipCode))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, timeout, typeof(Sample.USZipCode), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, typeof(Sample.USZipCode), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, timeout, typeof(Sample.USZipCode), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.USZipCode Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, typeof(Sample.USZipCode), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, typeof(Sample.USZipCode), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, typeof(Sample.USZipCode), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, typeof(Sample.USZipCode))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, timeout, typeof(Sample.USZipCode), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, typeof(Sample.USZipCode), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, concurrency, timeout, typeof(Sample.USZipCode), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.USZipCode OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.USZipCode)(conn.OpenProxyObj(Sample.USZipCode.ServerClassName, id, typeof(Sample.USZipCode), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.USZipCode.ExistsIdInternal(conn, Sample.USZipCode.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.USZipCode.DeleteIdInternal(conn, Sample.USZipCode.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Sample.USZipCode.KillExtentInternal(conn, Sample.USZipCode.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.USZipCode.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.USZipCode.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.USZipCode.ServerClassName);
            if (metaInfo.Validate(Sample.USZipCode.ClassCheckSum, Sample.USZipCode.PropertyInfoColn, Sample.USZipCode.CheckSumMethodDict, Sample.USZipCode.CheckSumQueryDict, Sample.USZipCode.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.USZipCode.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.USZipCode.AllPropertiesInfoColn != null)) {
                return Sample.USZipCode.AllPropertiesInfoColn;
            }
            Sample.USZipCode.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.USZipCode.PropertyInfoColn);
            return Sample.USZipCode.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.USZipCode.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// This class contains a method to generate data for Sample package
    /// </summary>
    public partial class Utils : InterSystems.Data.CacheTypes.CacheObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Utils";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 49742;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(3);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Utils() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Utils", typeof(Utils));
            ;
            ;
            Sample.Utils.CheckSumMethodDict.Add("Generate", 52534);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Utils() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Utils(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Utils.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Utils(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Utils.ServerClassName);
        }
        
        /// <summary>
        /// Invoke this method to set up the data for these classes.
        ///Create one company for every five people.
        /// </summary>
        public static void Generate(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> personCount) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(personCount, false);
                    Sample.Utils.RunClassMethodS(conn, Sample.Utils.ServerClassName, "Generate", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Utils.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Utils.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Utils.ServerClassName);
            if (metaInfo.Validate(Sample.Utils.ClassCheckSum, Sample.Utils.PropertyInfoColn, Sample.Utils.CheckSumMethodDict, Sample.Utils.CheckSumQueryDict, Sample.Utils.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Utils.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Utils.AllPropertiesInfoColn != null)) {
                return Sample.Utils.AllPropertiesInfoColn;
            }
            Sample.Utils.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Utils.PropertyInfoColn);
            return Sample.Utils.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Utils.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace Sample {
    
    
    /// <summary>
    /// The <class>Vendor</class> class is a persistent class 
    ///containing vendor information.<br>
    ///This class demonstrates how to use the <class>%CacheSQLStorage</class> storage 
    ///class to provide custom storage for a persistent class. Typically the 
    ///<class>%CacheSQLStorage</class> storage class is used to provide object access 
    ///to previously existing storage structures.
    /// </summary>
    public partial class Vendor : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Sample.Vendor";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(53);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(13);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Vendor() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Vendor", typeof(Vendor));
            ;
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Address", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 62725));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Balance", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 23157));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Contact", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DaysClear", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DiscDays", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DiscRate", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 23157));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("LastInvDate", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 49942));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("LastPayDate", InterSystems.Data.CacheTypes.ClientTypeId.tDate, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 49942));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MinPayment", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 23157));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("NetDays", InterSystems.Data.CacheTypes.ClientTypeId.tInt, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 30524));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("PayFlag", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            Sample.Vendor.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("TaxReporting", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            Sample.Vendor.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            Sample.Vendor.CheckSumMethodDict.Add("IDKEYExists", 13237);
            Sample.Vendor.CheckSumMethodDict.Add("IDKEYOpen", 58250);
            Sample.Vendor.CheckSumMethodDict.Add("IndexNNameExists", 10116);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Vendor() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Vendor(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, Sample.Vendor.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Vendor(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, Sample.Vendor.ServerClassName);
        }
        
        /// <summary>
        /// Vendor address.
        /// </summary>
        public virtual Sample.Address Address {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Sample.Address));
                        this.GetPropertyS("Address", mtdSignature);
                        return ((Sample.Address)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("Address", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Balance.
        /// </summary>
        public virtual System.Nullable<double> Balance {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("Balance", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Balance", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Name of primary vendor contact.
        /// </summary>
        public virtual string Contact {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Contact", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Contact", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Days clear.
        /// </summary>
        public virtual System.Nullable<long> DaysClear {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("DaysClear", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("DaysClear", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Discount days.
        /// </summary>
        public virtual System.Nullable<long> DiscDays {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("DiscDays", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("DiscDays", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Discount rate.
        /// </summary>
        public virtual System.Nullable<double> DiscRate {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("DiscRate", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("DiscRate", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Last Invoice Date.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate LastInvDate {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("LastInvDate", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("LastInvDate", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Last Payment Date.
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheDate LastPayDate {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDate);
                        this.GetPropertyS("LastPayDate", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDateReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, InterSystems.Data.CacheTypes.ClientTypeId.tDate, false);
                        this.SetPropertyS("LastPayDate", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Minimum Payment.
        /// </summary>
        public virtual System.Nullable<double> MinPayment {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("MinPayment", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("MinPayment", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Vendor name.
        /// </summary>
        public virtual string Name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("Name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Net days.
        /// </summary>
        public virtual System.Nullable<long> NetDays {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tInt);
                        this.GetPropertyS("NetDays", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("NetDays", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Payment Flag
        /// </summary>
        public virtual string PayFlag {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("PayFlag", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("PayFlag", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Vendor tax reporting status.
        /// </summary>
        public virtual string TaxReporting {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("TaxReporting", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("TaxReporting", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    Sample.Vendor.RunClassMethodS(conn, Sample.Vendor.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Vendor.RunClassMethodS(conn, Sample.Vendor.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static Sample.Vendor IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(Sample.Vendor));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Sample.Vendor.RunClassMethodS(conn, Sample.Vendor.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((Sample.Vendor)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IndexNNameExists
        /// </summary>
        public static System.Nullable<bool> IndexNNameExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    Sample.Vendor.RunClassMethodS(conn, Sample.Vendor.ServerClassName, "IndexNNameExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, typeof(Sample.Vendor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, typeof(Sample.Vendor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, typeof(Sample.Vendor))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, timeout, typeof(Sample.Vendor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, typeof(Sample.Vendor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, timeout, typeof(Sample.Vendor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static Sample.Vendor Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, typeof(Sample.Vendor), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, typeof(Sample.Vendor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, typeof(Sample.Vendor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, typeof(Sample.Vendor))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, timeout, typeof(Sample.Vendor), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, typeof(Sample.Vendor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, concurrency, timeout, typeof(Sample.Vendor), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static Sample.Vendor OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((Sample.Vendor)(conn.OpenProxyObj(Sample.Vendor.ServerClassName, id, typeof(Sample.Vendor), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Vendor.ExistsIdInternal(conn, Sample.Vendor.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return Sample.Vendor.DeleteIdInternal(conn, Sample.Vendor.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return Sample.Vendor.KillExtentInternal(conn, Sample.Vendor.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Sample.Vendor.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Sample.Vendor.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Sample.Vendor.ServerClassName);
            if (metaInfo.Validate(Sample.Vendor.ClassCheckSum, Sample.Vendor.PropertyInfoColn, Sample.Vendor.CheckSumMethodDict, Sample.Vendor.CheckSumQueryDict, Sample.Vendor.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Sample.Vendor.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Sample.Vendor.AllPropertiesInfoColn != null)) {
                return Sample.Vendor.AllPropertiesInfoColn;
            }
            Sample.Vendor.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Sample.Vendor.PropertyInfoColn);
            return Sample.Vendor.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Sample.Vendor.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
